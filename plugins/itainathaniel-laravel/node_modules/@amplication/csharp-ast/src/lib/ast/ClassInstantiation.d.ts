import { ClassReference } from "./ClassReference";
import { CodeBlock } from "./CodeBlock";
import { AstNode } from "../core/AstNode";
import { Writer } from "../core/Writer";
export declare namespace ClassInstantiation {
    interface Args {
        classReference: ClassReference;
        arguments_: NamedArgument[] | UnnamedArgument[];
    }
    interface NamedArgument {
        name: string;
        assignment: CodeBlock;
    }
    type UnnamedArgument = CodeBlock;
}
export declare class ClassInstantiation extends AstNode {
    readonly classReference: ClassReference;
    readonly arguments_: ClassInstantiation.NamedArgument[] | ClassInstantiation.UnnamedArgument[];
    constructor({ classReference, arguments_ }: ClassInstantiation.Args);
    write(writer: Writer): void;
}
