import { ClassReference } from "./ClassReference";
import { AstNode } from "../core/AstNode";
import { Writer } from "../core/Writer";
import { CoreClassReference } from "./CoreClassReference";
import { GenericClassReference } from "./GenericClassReference";
type InternalType = Integer | Long | String_ | Boolean_ | Double | Date | DateTime | Uuid | Object_ | List | Set | Map | Optional | Reference | GenericReference | OneOf | StringEnum | CoreReference;
interface Integer {
    type: "integer";
}
interface Long {
    type: "long";
}
interface String_ {
    type: "string";
}
interface Boolean_ {
    type: "boolean";
}
interface Double {
    type: "double";
}
interface Date {
    type: "date";
}
interface DateTime {
    type: "dateTime";
}
interface Uuid {
    type: "uuid";
}
interface Object_ {
    type: "object";
}
interface List {
    type: "list";
    value: Type;
}
interface Set {
    type: "set";
    value: Type;
}
interface Map {
    type: "map";
    keyType: Type;
    valueType: Type;
}
interface Optional {
    type: "optional";
    value: Type;
}
interface Reference {
    type: "reference";
    value: ClassReference;
}
interface GenericReference {
    type: "genericReference";
    value: GenericClassReference;
}
interface CoreReference {
    type: "coreReference";
    value: CoreClassReference;
}
interface OneOf {
    type: "oneOf";
    memberValues: Type[];
}
interface StringEnum {
    type: "stringEnum";
    value: ClassReference;
}
export declare class Type extends AstNode {
    readonly internalType: InternalType;
    private constructor();
    write(writer: Writer): void;
    static string(): Type;
    static boolean(): Type;
    static integer(): Type;
    static long(): Type;
    static double(): Type;
    static date(): Type;
    static dateTime(): Type;
    static uuid(): Type;
    static object(): Type;
    static list(value: Type): Type;
    static set(value: Type): Type;
    static map(keyType: Type, valueType: Type): Type;
    static optional(value: Type): Type;
    static reference(value: ClassReference): Type;
    static genericReference(value: GenericClassReference): Type;
    static coreClass(value: CoreClassReference): Type;
    static oneOf(memberValues: Type[]): Type;
    static stringEnum(value: ClassReference): Type;
}
export {};
