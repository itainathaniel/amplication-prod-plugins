import { Writer } from "../core/Writer";
import { ClassReference } from "./ClassReference";
import { Access } from "./Access";
import { AstNode } from "../core/AstNode";
import { Field } from "./Field";
import { Method } from "./Method";
export declare namespace Interface {
    interface Args {
        name: string;
        namespace: string;
        access: Access;
        partial?: boolean;
        isNestedInterface?: boolean;
    }
}
export declare class Interface extends AstNode {
    readonly name: string;
    readonly namespace: string;
    readonly access: Access;
    readonly partial: boolean;
    readonly reference: ClassReference;
    readonly isNestedInterface: boolean;
    private fields;
    private methods;
    constructor({ name, namespace, access, partial, isNestedInterface, }: Interface.Args);
    addField(field: Field): void;
    addMethod(method: Method): void;
    write(writer: Writer): void;
    getMethods(): Method[];
}
