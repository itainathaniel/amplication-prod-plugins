import { Access } from "./Access";
import { Annotation } from "./Annotation";
import { CodeBlock } from "./CodeBlock";
import { AstNode } from "../core/AstNode";
import { Writer } from "../core/Writer";
import { Type } from "./Type";
export declare namespace Field {
    interface Args {
        name: string;
        type: Type;
        get?: boolean;
        init?: boolean;
        set?: boolean;
        access: Access;
        readonly_?: boolean;
        annotations?: Annotation[];
        initializer?: CodeBlock;
        summary?: string;
        jsonPropertyName?: string;
        splitAnnotations?: boolean;
    }
}
export declare class Field extends AstNode {
    readonly name: string;
    readonly access: Access;
    readonly readonly_: boolean;
    private type;
    private get;
    private init;
    private set;
    private annotations;
    private initializer;
    private summary;
    private jsonPropertyName;
    readonly splitAnnotations?: boolean;
    constructor({ name, type, get, init, set, access, readonly_, annotations, initializer, summary, jsonPropertyName, splitAnnotations, }: Field.Args);
    write(writer: Writer): void;
}
