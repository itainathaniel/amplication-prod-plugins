import { Annotation, Class, ClassInstantiation, ClassReference, CodeBlock, CoreClassReference, Dictionary, Enum, Field, Interface, Method, MethodInvocation, Parameter, Type, ProgramClass } from "../ast";
import { GenericClassReference } from "../ast/GenericClassReference";
export declare function class_(args: Class.Args): Class;
export declare function annotation(args: Annotation.Args): Annotation;
export declare function classReference(args: ClassReference.Args): ClassReference;
export declare function genericClassReference(args: GenericClassReference.Args): GenericClassReference;
export declare function instantiateClass(args: ClassInstantiation.Args): ClassInstantiation;
export declare function invokeMethod(args: MethodInvocation.Args): MethodInvocation;
export declare function coreClassReference(args: CoreClassReference.Args): CoreClassReference;
export declare function codeblock(args: CodeBlock.Args): CodeBlock;
export declare function field(args: Field.Args): Field;
export declare function method(args: Method.Args): Method;
export declare function parameter(args: Parameter.Args): Parameter;
export declare function interface_(args: Interface.Args): Interface;
export declare function enum_(args: Enum.Args): Enum;
export declare function dictionary(args: Dictionary.Args): Dictionary;
export declare function programClass(args: ProgramClass.Args): ProgramClass;
export declare const Types: typeof Type;
