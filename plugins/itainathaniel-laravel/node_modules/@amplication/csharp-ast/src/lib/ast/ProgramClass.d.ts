import { ClassReference } from "./ClassReference";
import { CodeBlock } from "./CodeBlock";
import { AstNode } from "../core/AstNode";
import { Writer } from "../core/Writer";
export declare namespace ProgramClass {
    interface Args {
        references: ClassReference[];
        startFileBlocks?: CodeBlock[];
        builderServicesBlocks: CodeBlock[];
        appBlocks: CodeBlock[];
        catchBlocks?: CodeBlock[];
        finallyBlocks?: CodeBlock[];
        endFileBlocks?: CodeBlock[];
    }
}
export declare class ProgramClass extends AstNode {
    readonly references: ClassReference[];
    readonly startFileBlocks: CodeBlock[];
    readonly builderServicesBlocks: CodeBlock[];
    readonly appBlocks: CodeBlock[];
    readonly catchBlocks: CodeBlock[];
    readonly finallyBlocks: CodeBlock[];
    readonly endFileBlocks: CodeBlock[];
    constructor(args: ProgramClass.Args);
    addReference(reference: ClassReference): void;
    write(writer: Writer): void;
}
