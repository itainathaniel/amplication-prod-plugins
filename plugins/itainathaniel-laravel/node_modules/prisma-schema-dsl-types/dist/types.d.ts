export declare enum DataSourceProvider {
    PostgreSQL = "postgresql",
    MySQL = "mysql",
    SQLite = "sqlite",
    MongoDB = "mongodb",
    MSSQLServer = "sqlserver"
}
export interface DataSourceURLEnv {
    name: string;
}
export declare function isDataSourceURLEnv(url: string | DataSourceURLEnv): url is DataSourceURLEnv;
export type DataSource = {
    name: string;
    provider: DataSourceProvider;
    url: string | DataSourceURLEnv;
};
export type Generator = {
    name: string;
    provider: string;
    output?: string | null;
    binaryTargets?: string[];
};
export declare enum ScalarType {
    String = "String",
    Boolean = "Boolean",
    Int = "Int",
    BigInt = "BigInt",
    Float = "Float",
    Decimal = "Decimal",
    DateTime = "DateTime",
    Json = "Json"
}
export declare enum ReferentialActions {
    NONE = "NONE",
    Cascade = "Cascade",
    Restrict = "Restrict",
    NoAction = "NoAction",
    SetNull = "SetNull",
    SetDefault = "SetDefault"
}
export declare const AUTO_INCREMENT = "autoincrement";
export declare const NOW = "now";
export declare const CUID = "cuid";
export declare const UUID = "uuid";
export declare const DB_GENERATED = "dbgenerated";
export interface CallExpression {
    callee: string;
}
export declare function isCallExpression(object: unknown): object is CallExpression;
export declare enum FieldKind {
    Scalar = "scalar",
    Object = "object"
}
export type BaseField = {
    name: string;
    isList: boolean;
    isRequired: boolean;
    documentation?: string;
    attributes?: string[] | null;
};
export type ScalarFieldDefault = null | boolean | CallExpression | number | string;
export type ScalarField = BaseField & {
    kind: FieldKind.Scalar;
    type: ScalarType;
    isId: boolean;
    isUnique: boolean;
    isUpdatedAt: boolean;
    default: ScalarFieldDefault;
    isForeignKey: boolean;
};
export type ObjectField = BaseField & {
    kind: FieldKind.Object;
    type: string;
    relationName: string | null;
    relationToFields: string[];
    relationToReferences: string[];
    relationOnDelete?: ReferentialActions;
    relationOnUpdate?: ReferentialActions;
};
export type Model = {
    name: string;
    fields: Array<ScalarField | ObjectField>;
    map?: string;
    documentation?: string;
    attributes?: string[] | null;
};
export type Enum = {
    name: string;
    values: string[];
    documentation?: string;
};
export type Schema = {
    models: Model[];
    enums: Enum[];
    dataSource?: DataSource;
    generators: Generator[];
};
