"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProgramClass = void 0;
const AstNode_1 = require("../core/AstNode");
class ProgramClass extends AstNode_1.AstNode {
    references;
    startFileBlocks;
    builderServicesBlocks;
    appBlocks;
    catchBlocks;
    finallyBlocks;
    endFileBlocks;
    constructor(args) {
        super();
        this.startFileBlocks = args.startFileBlocks ?? [];
        this.builderServicesBlocks = args.builderServicesBlocks;
        this.appBlocks = args.appBlocks;
        this.catchBlocks = args.catchBlocks ?? [];
        this.finallyBlocks = args.finallyBlocks ?? [];
        this.endFileBlocks = args.endFileBlocks ?? [];
        this.references = args.references;
    }
    addReference(reference) {
        this.references.push(reference);
    }
    write(writer) {
        this.references.forEach((reference) => writer.addReference(reference));
        const hasTryCatch = this.catchBlocks.length > 0 || this.finallyBlocks.length > 0;
        if (this.startFileBlocks.length > 0) {
            this.startFileBlocks.forEach((block) => block.write(writer));
            writer.writeLine();
        }
        if (hasTryCatch) {
            writer.writeLine("try");
            writer.writeLine("{");
            writer.indent();
        }
        if (this.builderServicesBlocks.length > 0) {
            this.builderServicesBlocks.forEach((block) => block.write(writer));
            writer.writeLine();
        }
        if (this.appBlocks.length > 0) {
            this.appBlocks.forEach((block) => block.write(writer));
            writer.writeLine();
            writer.writeLine("app.Run();");
        }
        if (hasTryCatch) {
            writer.dedent();
            writer.writeLine("}");
            if (this.catchBlocks.length > 0) {
                writer.writeLine("catch(Exception ex)");
                writer.writeLine("{");
                writer.indent();
                this.catchBlocks.forEach((block) => block.write(writer));
                writer.dedent();
                writer.writeLine();
                writer.writeLine("}");
            }
            if (this.finallyBlocks.length > 0) {
                writer.writeLine("finally");
                writer.writeLine("{");
                writer.indent();
                this.finallyBlocks.forEach((block) => block.write(writer));
                writer.dedent();
                writer.writeLine();
                writer.writeLine("}");
            }
        }
        if (this.endFileBlocks.length > 0) {
            this.endFileBlocks.forEach((block) => block.write(writer));
        }
        writer.writeLine();
    }
}
exports.ProgramClass = ProgramClass;
//# sourceMappingURL=ProgramClass.js.map