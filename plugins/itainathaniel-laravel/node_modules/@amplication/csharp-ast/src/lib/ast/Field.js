"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Field = void 0;
const Annotation_1 = require("./Annotation");
const ClassReference_1 = require("./ClassReference");
const AstNode_1 = require("../core/AstNode");
class Field extends AstNode_1.AstNode {
    name;
    access;
    readonly_;
    type;
    get;
    init;
    set;
    annotations;
    initializer;
    summary;
    jsonPropertyName;
    splitAnnotations;
    constructor({ name, type, get, init, set, access, readonly_, annotations, initializer, summary, jsonPropertyName, splitAnnotations, }) {
        super();
        this.name = name;
        this.type = type;
        this.get = get ?? false;
        this.init = init ?? false;
        this.set = set ?? false;
        this.access = access;
        this.readonly_ = readonly_ ?? false;
        this.annotations = annotations ?? [];
        this.initializer = initializer;
        this.summary = summary;
        this.jsonPropertyName = jsonPropertyName;
        this.splitAnnotations = splitAnnotations ?? true;
        if (this.jsonPropertyName != null) {
            this.annotations = [
                new Annotation_1.Annotation({
                    reference: new ClassReference_1.ClassReference({
                        name: "JsonPropertyName",
                        namespace: "System.Text.Json.Serialization",
                    }),
                    argument: `"${this.jsonPropertyName}"`,
                }),
                ...this.annotations,
            ];
        }
    }
    write(writer) {
        if (this.summary != null) {
            writer.writeLine("/// <summary>");
            this.summary.split("\n").forEach((line) => {
                writer.writeLine(`/// ${line}`);
            });
            writer.writeLine("/// </summary>");
        }
        if (this.annotations.length > 0) {
            !this.splitAnnotations && writer.write("[");
            this.annotations.forEach((annotation, index) => {
                if (this.splitAnnotations) {
                    writer.write("[");
                    annotation.write(writer);
                    writer.write("]");
                    writer.newLine();
                }
                else {
                    annotation.write(writer);
                    if (index < (this.annotations ? this.annotations.length : 0) - 1) {
                        writer.write(", ");
                    }
                }
            });
        }
        writer.write(`${this.access} `);
        writer.write(this.readonly_ ? "readonly " : "");
        writer.writeNode(this.type);
        writer.write(` ${this.name}`);
        if (this.get || this.init || this.set) {
            writer.write(" { ");
            if (this.get) {
                writer.write("get; ");
            }
            if (this.init) {
                writer.write("init; ");
            }
            if (this.set) {
                writer.write("set; ");
            }
            writer.write("}");
        }
        if (this.initializer != null) {
            writer.write(" = ");
            this.initializer.write(writer);
            writer.writeLine(";");
        }
        else if (!this.get && !this.init && !this.set) {
            writer.writeLine(";");
        }
    }
}
exports.Field = Field;
//# sourceMappingURL=Field.js.map