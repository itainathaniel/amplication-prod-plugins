{"version":3,"file":"index.js","mappings":";;;;;;;AAAA;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;ACdA,kDAAyD;AACzD,wCAA+B;AAE/B,MAAM,aAAa;IACjB;;OAEG;IACH,QAAQ;QACN,OAAO;YACL,CAAC,2BAAU,CAAC,YAAY,CAAC,EAAE;gBACzB,MAAM,EAAE,IAAI,CAAC,kBAAkB;gBAC/B,KAAK,EAAE,IAAI,CAAC,iBAAiB;aAC9B;YACD,CAAC,2BAAU,CAAC,aAAa,CAAC,EAAE;gBAC1B,MAAM,EAAE,IAAI,CAAC,mBAAmB;aACjC;SACF,CAAC;IACJ,CAAC;IACD,kFAAkF;IAElF,kBAAkB,CAAC,OAAmB,EAAE,WAA+B;QACrE,4FAA4F;QAC5F,gGAAgG;QAChG,yGAAyG;QAEzG,OAAO,WAAW,CAAC,CAAC,0FAA0F;IAChH,CAAC;IAED,KAAK,CAAC,iBAAiB,CACrB,OAAmB,EACnB,WAA+B,EAC/B,OAAkB;QAElB,sFAAsF;QACtF,yEAAyE;QACzE,MAAM,UAAU,GAAG,kBAAO,EAAC,SAAS,EAAE,UAAU,CAAC,CAAC;QAClD,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,KAAK,CAAC,mBAAmB,CACzD,UAAU,EACV,OAAO,CAAC,iBAAiB,CAAC,YAAY,CACvC,CAAC;QACF,MAAM,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QACjC,OAAO,OAAO,CAAC,CAAC,wFAAwF;IAC1G,CAAC;IAED,mBAAmB,CAAC,OAAmB,EAAE,WAAgC;QACvE,yDAAyD;QAEzD,OAAO,WAAW,CAAC;IACrB,CAAC;CACF;AAED,qBAAe,aAAa,CAAC","sources":["webpack:///external commonjs2 \"@amplication/code-gen-types\"","webpack:///external node-commonjs \"path\"","webpack:///webpack/bootstrap","webpack:///./src/index.ts"],"sourcesContent":["module.exports = require(\"@amplication/code-gen-types\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import type {\n  AmplicationPlugin,\n  CreateAdminUIParams,\n  CreateServerParams,\n  DsgContext,\n  Events,\n  ModuleMap,\n} from \"@amplication/code-gen-types\";\nimport { EventNames } from \"@amplication/code-gen-types\";\nimport { resolve } from \"path\";\n\nclass ExamplePlugin implements AmplicationPlugin {\n  /**\n   * This is mandatory function that returns an object with the event name. Each event can have before or/and after\n   */\n  register(): Events {\n    return {\n      [EventNames.CreateServer]: {\n        before: this.beforeCreateServer,\n        after: this.afterCreateServer,\n      },\n      [EventNames.CreateAdminUI]: {\n        before: this.beforeCreateAdminUI,\n      },\n    };\n  }\n  // You can combine many events in one plugin in order to change the related files.\n\n  beforeCreateServer(context: DsgContext, eventParams: CreateServerParams) {\n    // Here you can manipulate the context or save any context variable for your after function.\n    // You can also manipulate the eventParams so it will change the result of Amplication function.\n    // context.utils.skipDefaultBehavior = true; this will prevent the default behavior and skip our handler.\n\n    return eventParams; // eventParams must return from before function. It will be used for the builder function.\n  }\n\n  async afterCreateServer(\n    context: DsgContext,\n    eventParams: CreateServerParams,\n    modules: ModuleMap\n  ): Promise<ModuleMap> {\n    // Here you can get the context, eventParams and the modules that Amplication created.\n    // Then you can manipulate the modules, add new ones, or create your own.\n    const staticPath = resolve(__dirname, \"./static\");\n    const staticFiles = await context.utils.importStaticModules(\n      staticPath,\n      context.serverDirectories.srcDirectory\n    );\n    await modules.merge(staticFiles);\n    return modules; // You must return the generated modules you want to generate at this part of the build.\n  }\n\n  beforeCreateAdminUI(context: DsgContext, eventParams: CreateAdminUIParams) {\n    // Same as beforeCreateExample but for a different event.\n\n    return eventParams;\n  }\n}\n\nexport default ExamplePlugin;\n"],"names":[],"sourceRoot":""}