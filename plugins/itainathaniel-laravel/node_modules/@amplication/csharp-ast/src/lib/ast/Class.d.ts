import { Access } from "./Access";
import { Annotation } from "./Annotation";
import { ClassReference } from "./ClassReference";
import { CodeBlock } from "./CodeBlock";
import { AstNode } from "../core/AstNode";
import { Writer } from "../core/Writer";
import { Field } from "./Field";
import { Interface } from "./Interface";
import { Method } from "./Method";
import { Parameter } from "./Parameter";
import { GenericClassReference } from "./GenericClassReference";
export declare namespace Class {
    interface Args {
        name: string;
        namespace: string;
        access: Access;
        abstract?: boolean;
        sealed?: boolean;
        static_?: boolean;
        partial?: boolean;
        parentClassReference?: ClassReference | GenericClassReference;
        interfaceReferences?: ClassReference[];
        isNestedClass?: boolean;
        annotations?: Annotation[];
        splitAnnotations?: boolean;
    }
    interface Constructor {
        body?: CodeBlock;
        parameters: Parameter[];
        access: Access;
        bases?: string[];
    }
}
export declare class Class extends AstNode {
    readonly name: string;
    readonly namespace: string;
    readonly access: Access;
    readonly abstract: boolean;
    readonly static_: boolean;
    readonly sealed: boolean;
    readonly partial: boolean;
    readonly reference: ClassReference;
    readonly interfaceReferences: ClassReference[];
    readonly isNestedClass: boolean;
    readonly annotations: Annotation[];
    readonly splitAnnotations?: boolean;
    private fields;
    private constructors;
    private methods;
    private nestedClasses;
    private nestedInterfaces;
    parentClassReference: ClassReference | GenericClassReference | undefined;
    constructor({ name, namespace, access, abstract, static_, sealed, partial, parentClassReference, interfaceReferences, isNestedClass, annotations, splitAnnotations, }: Class.Args);
    addField(field: Field): void;
    addConstructor(constructor: Class.Constructor): void;
    addMethod(method: Method): void;
    addNestedClass(subClass: Class): void;
    addNestedInterface(subInterface: Interface): void;
    write(writer: Writer): void;
    private writeConstructors;
    private writeMethods;
    private getMethodsByAccess;
    private writeFields;
    private getFieldsByAccess;
    getFields(): Field[];
    getMethods(): Method[];
}
