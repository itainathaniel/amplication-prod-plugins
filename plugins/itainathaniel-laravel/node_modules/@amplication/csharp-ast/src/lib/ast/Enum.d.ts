import { Access } from "./Access";
import { Annotation } from "./Annotation";
import { ClassReference } from "./ClassReference";
import { AstNode } from "../core/AstNode";
import { Writer } from "../core/Writer";
export declare namespace Enum {
    interface Args {
        name: string;
        namespace: string;
        access: Access;
        annotations?: Annotation[];
    }
    interface Member {
        name: string;
        value: string;
    }
    interface _Member {
        name: string;
        value: Annotation;
    }
}
export declare class Enum extends AstNode {
    readonly name: string;
    readonly namespace: string;
    readonly access: Access;
    readonly reference: ClassReference;
    private annotations;
    private fields;
    constructor({ name, namespace, access, annotations }: Enum.Args);
    addMember(field: Enum.Member): void;
    write(writer: Writer): void;
}
